diff --git a/node_modules/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/utils/PathUtils.kt b/node_modules/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/utils/PathUtils.kt
index 562ac78..9f88f4d 100644
--- a/node_modules/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/utils/PathUtils.kt
+++ b/node_modules/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/utils/PathUtils.kt
@@ -145,7 +145,8 @@ internal fun detectOSAwareHermesCommand(projectRoot: File, hermesCommand: String
 
   // 3. If the react-native contains a pre-built hermesc, use it.
   val prebuiltHermesPath =
-      HERMESC_IN_REACT_NATIVE_PATH.replace("%OS-BIN%", getHermesOSBin())
+      HERMESC_IN_REACT_NATIVE_DIR.plus(getHermesCBin())
+          .replace("%OS-BIN%", getHermesOSBin())
           // Execution on Windows fails with / as separator
           .replace('/', File.separatorChar)
 
@@ -162,7 +163,7 @@ internal fun detectOSAwareHermesCommand(projectRoot: File, hermesCommand: String
 
 /**
  * Gets the location where Hermesc should be. If nothing is specified, built hermesc is assumed to
- * be inside [HERMESC_BUILT_FROM_SOURCE_PATH]. Otherwise user can specify an override with
+ * be inside [HERMESC_BUILT_FROM_SOURCE_DIR]. Otherwise user can specify an override with
  * [pathOverride], which is assumed to be an absolute path where Hermes source code is
  * provided/built.
  *
@@ -170,11 +171,13 @@ internal fun detectOSAwareHermesCommand(projectRoot: File, hermesCommand: String
  */
 internal fun getBuiltHermescFile(projectRoot: File, pathOverride: String?) =
     if (!pathOverride.isNullOrBlank()) {
-      File(pathOverride, "build/bin/hermesc")
+      File(pathOverride, "build/bin/${getHermesCBin()}")
     } else {
-      File(projectRoot, HERMESC_BUILT_FROM_SOURCE_PATH)
+      File(projectRoot, HERMESC_BUILT_FROM_SOURCE_DIR.plus(getHermesCBin()))
     }
 
+internal fun getHermesCBin() = if (Os.isWindows()) "hermesc.exe" else "hermesc"
+
 internal fun getHermesOSBin(): String {
   if (Os.isWindows()) return "win64-bin"
   if (Os.isMac()) return "osx-bin"
@@ -190,7 +193,7 @@ internal fun projectPathToLibraryName(projectPath: String): String =
         .joinToString("") { token -> token.replaceFirstChar { it.uppercase() } }
         .plus("Spec")
 
-private const val HERMESC_IN_REACT_NATIVE_PATH =
-    "node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
-private const val HERMESC_BUILT_FROM_SOURCE_PATH =
-    "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc"
+private const val HERMESC_IN_REACT_NATIVE_DIR =
+    "node_modules/react-native/sdks/hermesc/%OS-BIN%/"
+private const val HERMESC_BUILT_FROM_SOURCE_DIR =
+    "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/"
\ No newline at end of file
